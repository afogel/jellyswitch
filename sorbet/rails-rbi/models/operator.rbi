# This is an autogenerated file for dynamic methods in Operator
# Please rerun rake rails_rbi:models to regenerate.
# typed: ignore

class Operator::Relation < ActiveRecord::Relation
  include Operator::NamedScope
  extend T::Generic
  Elem = type_member(fixed: Operator)
end

class Operator < ApplicationRecord
  extend T::Sig
  extend T::Generic
  extend Operator::NamedScope
  Elem = type_template(fixed: Operator)

  sig { returns(T.nilable(String)) }
  def android_url(); end

  sig { params(value: T.nilable(String)).void }
  def android_url=(value); end

  sig { returns(T::Boolean) }
  def approval_required(); end

  sig { params(value: T::Boolean).void }
  def approval_required=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def approval_required?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def background_image_attachment(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def background_image_attachment=(value); end

  sig { returns(T.nilable(T.untyped)) }
  def background_image_blob(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def background_image_blob=(value); end

  sig { returns(String) }
  def billing_state(); end

  sig { params(value: String).void }
  def billing_state=(value); end

  sig { returns(String) }
  def building_address(); end

  sig { params(value: String).void }
  def building_address=(value); end

  sig { returns(T::Boolean) }
  def checkin_required(); end

  sig { params(value: T::Boolean).void }
  def checkin_required=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def checkin_required?(*args); end

  sig { returns(T.nilable(String)) }
  def contact_email(); end

  sig { params(value: T.nilable(String)).void }
  def contact_email=(value); end

  sig { returns(T.nilable(String)) }
  def contact_name(); end

  sig { params(value: T.nilable(String)).void }
  def contact_name=(value); end

  sig { returns(T.nilable(String)) }
  def contact_phone(); end

  sig { params(value: T.nilable(String)).void }
  def contact_phone=(value); end

  sig { returns(DateTime) }
  def created_at(); end

  sig { params(value: DateTime).void }
  def created_at=(value); end

  sig { returns(Integer) }
  def day_pass_cost_in_cents(); end

  sig { params(value: Integer).void }
  def day_pass_cost_in_cents=(value); end

  sig { returns(DayPassType::Relation) }
  def day_pass_types(); end

  sig { params(value: T.any(T::Array[DayPassType], DayPassType::Relation)).void }
  def day_pass_types=(value); end

  sig { returns(DayPass::Relation) }
  def day_passes(); end

  sig { params(value: T.any(T::Array[DayPass], DayPass::Relation)).void }
  def day_passes=(value); end

  sig { returns(Door::Relation) }
  def doors(); end

  sig { params(value: T.any(T::Array[Door], Door::Relation)).void }
  def doors=(value); end

  sig { returns(T::Boolean) }
  def email_enabled(); end

  sig { params(value: T::Boolean).void }
  def email_enabled=(value); end

  sig { returns(FeedItem::Relation) }
  def feed_items(); end

  sig { params(value: T.any(T::Array[FeedItem], FeedItem::Relation)).void }
  def feed_items=(value); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(Invoice::Relation) }
  def invoices(); end

  sig { params(value: T.any(T::Array[Invoice], Invoice::Relation)).void }
  def invoices=(value); end

  sig { returns(T.nilable(String)) }
  def ios_url(); end

  sig { params(value: T.nilable(String)).void }
  def ios_url=(value); end

  sig { returns(T.nilable(String)) }
  def kisi_api_key(); end

  sig { params(value: T.nilable(String)).void }
  def kisi_api_key=(value); end

  sig { returns(Location::Relation) }
  def locations(); end

  sig { params(value: T.any(T::Array[Location], Location::Relation)).void }
  def locations=(value); end

  sig { returns(T.nilable(ActiveStorage::Attachment)) }
  def logo_image_attachment(); end

  sig { params(value: T.nilable(ActiveStorage::Attachment)).void }
  def logo_image_attachment=(value); end

  sig { returns(T.nilable(T.untyped)) }
  def logo_image_blob(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def logo_image_blob=(value); end

  sig { returns(MemberFeedback::Relation) }
  def member_feedbacks(); end

  sig { params(value: T.any(T::Array[MemberFeedback], MemberFeedback::Relation)).void }
  def member_feedbacks=(value); end

  sig { returns(T.nilable(String)) }
  def membership_text(); end

  sig { params(value: T.nilable(String)).void }
  def membership_text=(value); end

  sig { returns(String) }
  def name(); end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(OfficeLease::Relation) }
  def office_leases(); end

  sig { params(value: T.any(T::Array[OfficeLease], OfficeLease::Relation)).void }
  def office_leases=(value); end

  sig { returns(Office::Relation) }
  def offices(); end

  sig { params(value: T.any(T::Array[Office], Office::Relation)).void }
  def offices=(value); end

  sig { returns(OperatorSurvey::Relation) }
  def operator_surveys(); end

  sig { params(value: T.any(T::Array[OperatorSurvey], OperatorSurvey::Relation)).void }
  def operator_surveys=(value); end

  sig { returns(Organization::Relation) }
  def organizations(); end

  sig { params(value: T.any(T::Array[Organization], Organization::Relation)).void }
  def organizations=(value); end

  sig { returns(Plan::Relation) }
  def plans(); end

  sig { params(value: T.any(T::Array[Plan], Plan::Relation)).void }
  def plans=(value); end

  sig { returns(T.nilable(ActiveStorage::Attachment)) }
  def push_notification_certificate_attachment(); end

  sig { params(value: T.nilable(ActiveStorage::Attachment)).void }
  def push_notification_certificate_attachment=(value); end

  sig { returns(T.nilable(T.untyped)) }
  def push_notification_certificate_blob(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def push_notification_certificate_blob=(value); end

  sig { returns(Room::Relation) }
  def rooms(); end

  sig { params(value: T.any(T::Array[Room], Room::Relation)).void }
  def rooms=(value); end

  sig { returns(String) }
  def snippet(); end

  sig { params(value: String).void }
  def snippet=(value); end

  sig { returns(Integer) }
  def square_footage(); end

  sig { params(value: Integer).void }
  def square_footage=(value); end

  sig { returns(T.nilable(String)) }
  def stripe_access_token(); end

  sig { params(value: T.nilable(String)).void }
  def stripe_access_token=(value); end

  sig { returns(T.nilable(String)) }
  def stripe_publishable_key(); end

  sig { params(value: T.nilable(String)).void }
  def stripe_publishable_key=(value); end

  sig { returns(T.nilable(String)) }
  def stripe_refresh_token(); end

  sig { params(value: T.nilable(String)).void }
  def stripe_refresh_token=(value); end

  sig { returns(T.nilable(String)) }
  def stripe_user_id(); end

  sig { params(value: T.nilable(String)).void }
  def stripe_user_id=(value); end

  sig { returns(String) }
  def subdomain(); end

  sig { params(value: String).void }
  def subdomain=(value); end

  sig { returns(T.nilable(ActiveStorage::Attachment)) }
  def terms_of_service_attachment(); end

  sig { params(value: T.nilable(ActiveStorage::Attachment)).void }
  def terms_of_service_attachment=(value); end

  sig { returns(T.nilable(T.untyped)) }
  def terms_of_service_blob(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def terms_of_service_blob=(value); end

  sig { returns(DateTime) }
  def updated_at(); end

  sig { params(value: DateTime).void }
  def updated_at=(value); end

  sig { returns(User::Relation) }
  def users(); end

  sig { params(value: T.any(T::Array[User], User::Relation)).void }
  def users=(value); end

  sig { returns(String) }
  def wifi_name(); end

  sig { params(value: String).void }
  def wifi_name=(value); end

  sig { returns(String) }
  def wifi_password(); end

  sig { params(value: String).void }
  def wifi_password=(value); end

end


module Operator::NamedScope
  extend T::Sig

  sig { returns(Operator::Relation) }
  def all(); end

  sig { params(args: T.untyped).returns(Operator::Relation) }
  def demo(*args); end

  sig { params(args: T.untyped).returns(Operator::Relation) }
  def production(*args); end

  sig { params(args: T.untyped).returns(Operator::Relation) }
  def with_attached_background_image(*args); end

  sig { params(args: T.untyped).returns(Operator::Relation) }
  def with_attached_logo_image(*args); end

  sig { params(args: T.untyped).returns(Operator::Relation) }
  def with_attached_push_notification_certificate(*args); end

  sig { params(args: T.untyped).returns(Operator::Relation) }
  def with_attached_terms_of_service(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Operator::Relation) }
  def select(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Operator::Relation) }
  def order(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Operator::Relation) }
  def reorder(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Operator::Relation) }
  def group(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Operator::Relation) }
  def limit(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Operator::Relation) }
  def offset(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Operator::Relation) }
  def joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Operator::Relation) }
  def left_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Operator::Relation) }
  def left_outer_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Operator::Relation) }
  def where(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Operator::Relation) }
  def rewhere(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Operator::Relation) }
  def preload(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Operator::Relation) }
  def eager_load(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Operator::Relation) }
  def includes(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Operator::Relation) }
  def from(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Operator::Relation) }
  def lock(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Operator::Relation) }
  def readonly(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Operator::Relation) }
  def extending(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Operator::Relation) }
  def or(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Operator::Relation) }
  def having(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Operator::Relation) }
  def create_with(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Operator::Relation) }
  def distinct(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Operator::Relation) }
  def references(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Operator::Relation) }
  def none(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Operator::Relation) }
  def unscope(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Operator::Relation) }
  def merge(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Operator::Relation) }
  def except(*args, block); end

end

