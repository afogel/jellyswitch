# This is an autogenerated file for dynamic methods in Plan
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class Plan::Relation < ActiveRecord::Relation
  include Plan::NamedScope
  extend T::Generic
  Elem = type_member(fixed: Plan)
end

class Plan < ApplicationRecord
  extend T::Sig
  extend T::Generic
  extend Plan::NamedScope
  Elem = type_template(fixed: Plan)

  sig { returns(T::Boolean) }
  def always_allow_building_access(); end

  sig { params(value: T::Boolean).void }
  def always_allow_building_access=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def always_allow_building_access?(*args); end

  sig { returns(Integer) }
  def amount_in_cents(); end

  sig { params(value: Integer).void }
  def amount_in_cents=(value); end

  sig { returns(T::Boolean) }
  def available(); end

  sig { params(value: T::Boolean).void }
  def available=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def available?(*args); end

  sig { returns(DateTime) }
  def created_at(); end

  sig { params(value: DateTime).void }
  def created_at=(value); end

  sig { returns(Integer) }
  def day_limit(); end

  sig { params(value: Integer).void }
  def day_limit=(value); end

  sig { returns(T::Boolean) }
  def has_day_limit(); end

  sig { params(value: T::Boolean).void }
  def has_day_limit=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def has_day_limit?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(String) }
  def interval(); end

  sig { params(value: String).void }
  def interval=(value); end

  sig { returns(String) }
  def name(); end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(Integer) }
  def operator_id(); end

  sig { returns(T.nilable(String)) }
  def plan_type(); end

  sig { params(value: T.nilable(String)).void }
  def plan_type=(value); end

  sig { returns(T.nilable(String)) }
  def slug(); end

  sig { params(value: T.nilable(String)).void }
  def slug=(value); end

  sig { returns(T.nilable(String)) }
  def stripe_plan_id(); end

  sig { params(value: T.nilable(String)).void }
  def stripe_plan_id=(value); end

  sig { returns(Subscription::Relation) }
  def subscriptions(); end

  sig { params(value: T.any(T::Array[Subscription], Subscription::Relation)).void }
  def subscriptions=(value); end

  sig { returns(DateTime) }
  def updated_at(); end

  sig { params(value: DateTime).void }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def visible(); end

  sig { params(value: T::Boolean).void }
  def visible=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def visible?(*args); end

end


module Plan::NamedScope
  extend T::Sig

  sig { returns(Plan::Relation) }
  def all(); end

  sig { params(args: T.untyped).returns(Plan::Relation) }
  def available(*args); end

  sig { params(args: T.untyped).returns(Plan::Relation) }
  def cheapest(*args); end

  sig { params(args: T.untyped).returns(Plan::Relation) }
  def for_individuals(*args); end

  sig { params(args: T.untyped).returns(Plan::Relation) }
  def individual(*args); end

  sig { params(args: T.untyped).returns(Plan::Relation) }
  def invisible(*args); end

  sig { params(args: T.untyped).returns(Plan::Relation) }
  def lease(*args); end

  sig { params(args: T.untyped).returns(Plan::Relation) }
  def nonzero(*args); end

  sig { params(args: T.untyped).returns(Plan::Relation) }
  def unavailable(*args); end

  sig { params(args: T.untyped).returns(Plan::Relation) }
  def visible(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Plan::Relation) }
  def select(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Plan::Relation) }
  def order(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Plan::Relation) }
  def reorder(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Plan::Relation) }
  def group(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Plan::Relation) }
  def limit(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Plan::Relation) }
  def offset(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Plan::Relation) }
  def joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Plan::Relation) }
  def left_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Plan::Relation) }
  def left_outer_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Plan::Relation) }
  def where(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Plan::Relation) }
  def rewhere(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Plan::Relation) }
  def preload(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Plan::Relation) }
  def eager_load(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Plan::Relation) }
  def includes(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Plan::Relation) }
  def from(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Plan::Relation) }
  def lock(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Plan::Relation) }
  def readonly(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Plan::Relation) }
  def extending(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Plan::Relation) }
  def or(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Plan::Relation) }
  def having(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Plan::Relation) }
  def create_with(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Plan::Relation) }
  def distinct(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Plan::Relation) }
  def references(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Plan::Relation) }
  def none(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Plan::Relation) }
  def unscope(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Plan::Relation) }
  def merge(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Plan::Relation) }
  def except(*args, block); end

end

