# This is an autogenerated file for dynamic methods in Organization
# Please rerun rake rails_rbi:models to regenerate.
# typed: ignore

class Organization::Relation < ActiveRecord::Relation
  include Organization::NamedScope
  extend T::Generic
  Elem = type_member(fixed: Organization)
end

class Organization < ApplicationRecord
  extend T::Sig
  extend T::Generic
  extend Organization::NamedScope
  Elem = type_template(fixed: Organization)

  sig { returns(DateTime) }
  def created_at(); end

  sig { params(value: DateTime).void }
  def created_at=(value); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(Invoice::Relation) }
  def invoices(); end

  sig { params(value: T.any(T::Array[Invoice], Invoice::Relation)).void }
  def invoices=(value); end

  sig { returns(String) }
  def name(); end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(OfficeLease::Relation) }
  def office_leases(); end

  sig { params(value: T.any(T::Array[OfficeLease], OfficeLease::Relation)).void }
  def office_leases=(value); end

  sig { returns(Integer) }
  def operator_id(); end

  sig { returns(T::Boolean) }
  def out_of_band(); end

  sig { params(value: T::Boolean).void }
  def out_of_band=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def out_of_band?(*args); end

  sig { returns(T.nilable(User)) }
  def owner(); end

  sig { params(value: T.nilable(User)).void }
  def owner=(value); end

  sig { returns(T.nilable(Integer)) }
  def owner_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def owner_id=(value); end

  sig { returns(T.nilable(String)) }
  def slug(); end

  sig { params(value: T.nilable(String)).void }
  def slug=(value); end

  sig { returns(T.nilable(String)) }
  def stripe_customer_id(); end

  sig { params(value: T.nilable(String)).void }
  def stripe_customer_id=(value); end

  sig { returns(Subscription::Relation) }
  def subscriptions(); end

  sig { params(value: T.any(T::Array[Subscription], Subscription::Relation)).void }
  def subscriptions=(value); end

  sig { returns(DateTime) }
  def updated_at(); end

  sig { params(value: DateTime).void }
  def updated_at=(value); end

  sig { returns(User::Relation) }
  def users(); end

  sig { params(value: T.any(T::Array[User], User::Relation)).void }
  def users=(value); end

  sig { returns(T.nilable(String)) }
  def website(); end

  sig { params(value: T.nilable(String)).void }
  def website=(value); end

end


module Organization::NamedScope
  extend T::Sig

  sig { returns(Organization::Relation) }
  def all(); end

  sig { params(args: T.untyped).returns(Organization::Relation) }
  def eligible_for_lease(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::Relation) }
  def select(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::Relation) }
  def order(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::Relation) }
  def reorder(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::Relation) }
  def group(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::Relation) }
  def limit(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::Relation) }
  def offset(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::Relation) }
  def joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::Relation) }
  def left_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::Relation) }
  def left_outer_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::Relation) }
  def where(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::Relation) }
  def rewhere(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::Relation) }
  def preload(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::Relation) }
  def eager_load(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::Relation) }
  def includes(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::Relation) }
  def from(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::Relation) }
  def lock(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::Relation) }
  def readonly(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::Relation) }
  def extending(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::Relation) }
  def or(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::Relation) }
  def having(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::Relation) }
  def create_with(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::Relation) }
  def distinct(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::Relation) }
  def references(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::Relation) }
  def none(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::Relation) }
  def unscope(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::Relation) }
  def merge(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::Relation) }
  def except(*args, block); end

end

