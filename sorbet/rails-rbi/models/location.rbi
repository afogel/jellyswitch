# This is an autogenerated file for dynamic methods in Location
# Please rerun rake rails_rbi:models to regenerate.
# typed: ignore

class Location::Relation < ActiveRecord::Relation
  include Location::NamedScope
  extend T::Generic
  Elem = type_member(fixed: Location)
end

class Location < ApplicationRecord
  extend T::Sig
  extend T::Generic
  extend Location::NamedScope
  Elem = type_template(fixed: Location)

  sig { returns(T::Boolean) }
  def allow_hourly(); end

  sig { params(value: T::Boolean).void }
  def allow_hourly=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def allow_hourly?(*args); end

  sig { returns(T.nilable(ActiveStorage::Attachment)) }
  def background_image_attachment(); end

  sig { params(value: T.nilable(ActiveStorage::Attachment)).void }
  def background_image_attachment=(value); end

  sig { returns(T.nilable(T.untyped)) }
  def background_image_blob(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def background_image_blob=(value); end

  sig { returns(T.nilable(String)) }
  def billing_state(); end

  sig { params(value: T.nilable(String)).void }
  def billing_state=(value); end

  sig { returns(T.nilable(String)) }
  def building_access_instructions(); end

  sig { params(value: T.nilable(String)).void }
  def building_access_instructions=(value); end

  sig { returns(T.nilable(String)) }
  def building_address(); end

  sig { params(value: T.nilable(String)).void }
  def building_address=(value); end

  sig { returns(Checkin::Relation) }
  def checkins(); end

  sig { params(value: T.any(T::Array[Checkin], Checkin::Relation)).void }
  def checkins=(value); end

  sig { returns(T.nilable(String)) }
  def city(); end

  sig { params(value: T.nilable(String)).void }
  def city=(value); end

  sig { returns(Integer) }
  def common_square_footage(); end

  sig { params(value: Integer).void }
  def common_square_footage=(value); end

  sig { returns(T.nilable(String)) }
  def contact_email(); end

  sig { params(value: T.nilable(String)).void }
  def contact_email=(value); end

  sig { returns(T.nilable(String)) }
  def contact_name(); end

  sig { params(value: T.nilable(String)).void }
  def contact_name=(value); end

  sig { returns(T.nilable(String)) }
  def contact_phone(); end

  sig { params(value: T.nilable(String)).void }
  def contact_phone=(value); end

  sig { returns(DateTime) }
  def created_at(); end

  sig { params(value: DateTime).void }
  def created_at=(value); end

  sig { returns(Door::Relation) }
  def doors(); end

  sig { params(value: T.any(T::Array[Door], Door::Relation)).void }
  def doors=(value); end

  sig { returns(FeedItem::Relation) }
  def feed_items(); end

  sig { params(value: T.any(T::Array[FeedItem], FeedItem::Relation)).void }
  def feed_items=(value); end

  sig { returns(Integer) }
  def flex_square_footage(); end

  sig { params(value: Integer).void }
  def flex_square_footage=(value); end

  sig { returns(Integer) }
  def hourly_rate_in_cents(); end

  sig { params(value: Integer).void }
  def hourly_rate_in_cents=(value); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(MemberFeedback::Relation) }
  def member_feedbacks(); end

  sig { params(value: T.any(T::Array[MemberFeedback], MemberFeedback::Relation)).void }
  def member_feedbacks=(value); end

  sig { returns(T.nilable(String)) }
  def name(); end

  sig { params(value: T.nilable(String)).void }
  def name=(value); end

  sig { returns(T::Boolean) }
  def new_users_get_free_day_pass(); end

  sig { params(value: T::Boolean).void }
  def new_users_get_free_day_pass=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def new_users_get_free_day_pass?(*args); end

  sig { returns(OfficeLease::Relation) }
  def office_leases(); end

  sig { params(value: T.any(T::Array[OfficeLease], OfficeLease::Relation)).void }
  def office_leases=(value); end

  sig { returns(Office::Relation) }
  def offices(); end

  sig { params(value: T.any(T::Array[Office], Office::Relation)).void }
  def offices=(value); end

  sig { returns(T::Boolean) }
  def open_friday(); end

  sig { params(value: T::Boolean).void }
  def open_friday=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def open_friday?(*args); end

  sig { returns(T::Boolean) }
  def open_monday(); end

  sig { params(value: T::Boolean).void }
  def open_monday=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def open_monday?(*args); end

  sig { returns(T::Boolean) }
  def open_saturday(); end

  sig { params(value: T::Boolean).void }
  def open_saturday=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def open_saturday?(*args); end

  sig { returns(T::Boolean) }
  def open_sunday(); end

  sig { params(value: T::Boolean).void }
  def open_sunday=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def open_sunday?(*args); end

  sig { returns(T::Boolean) }
  def open_thursday(); end

  sig { params(value: T::Boolean).void }
  def open_thursday=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def open_thursday?(*args); end

  sig { returns(T::Boolean) }
  def open_tuesday(); end

  sig { params(value: T::Boolean).void }
  def open_tuesday=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def open_tuesday?(*args); end

  sig { returns(T::Boolean) }
  def open_wednesday(); end

  sig { params(value: T::Boolean).void }
  def open_wednesday=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def open_wednesday?(*args); end

  sig { returns(Integer) }
  def operator_id(); end

  sig { returns(T.nilable(ActiveStorage::Attachment)) }
  def photo_attachment(); end

  sig { params(value: T.nilable(ActiveStorage::Attachment)).void }
  def photo_attachment=(value); end

  sig { returns(T.nilable(T.untyped)) }
  def photo_blob(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def photo_blob=(value); end

  sig { returns(Room::Relation) }
  def rooms(); end

  sig { params(value: T.any(T::Array[Room], Room::Relation)).void }
  def rooms=(value); end

  sig { returns(T.nilable(String)) }
  def snippet(); end

  sig { params(value: T.nilable(String)).void }
  def snippet=(value); end

  sig { returns(T.nilable(Integer)) }
  def square_footage(); end

  sig { params(value: T.nilable(Integer)).void }
  def square_footage=(value); end

  sig { returns(T.nilable(String)) }
  def state(); end

  sig { params(value: T.nilable(String)).void }
  def state=(value); end

  sig { returns(T.nilable(String)) }
  def stripe_access_token(); end

  sig { params(value: T.nilable(String)).void }
  def stripe_access_token=(value); end

  sig { returns(T.nilable(String)) }
  def stripe_publishable_key(); end

  sig { params(value: T.nilable(String)).void }
  def stripe_publishable_key=(value); end

  sig { returns(T.nilable(String)) }
  def stripe_refresh_token(); end

  sig { params(value: T.nilable(String)).void }
  def stripe_refresh_token=(value); end

  sig { returns(T.nilable(String)) }
  def stripe_user_id(); end

  sig { params(value: T.nilable(String)).void }
  def stripe_user_id=(value); end

  sig { returns(String) }
  def time_zone(); end

  sig { params(value: String).void }
  def time_zone=(value); end

  sig { returns(DateTime) }
  def updated_at(); end

  sig { params(value: DateTime).void }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def visible(); end

  sig { params(value: T::Boolean).void }
  def visible=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def visible?(*args); end

  sig { returns(T.nilable(String)) }
  def wifi_name(); end

  sig { params(value: T.nilable(String)).void }
  def wifi_name=(value); end

  sig { returns(T.nilable(String)) }
  def wifi_password(); end

  sig { params(value: T.nilable(String)).void }
  def wifi_password=(value); end

  sig { returns(String) }
  def working_day_end(); end

  sig { params(value: String).void }
  def working_day_end=(value); end

  sig { returns(String) }
  def working_day_start(); end

  sig { params(value: String).void }
  def working_day_start=(value); end

  sig { returns(T.nilable(String)) }
  def zip(); end

  sig { params(value: T.nilable(String)).void }
  def zip=(value); end

end


module Location::NamedScope
  extend T::Sig

  sig { returns(Location::Relation) }
  def all(); end

  sig { params(args: T.untyped).returns(Location::Relation) }
  def visible(*args); end

  sig { params(args: T.untyped).returns(Location::Relation) }
  def with_attached_background_image(*args); end

  sig { params(args: T.untyped).returns(Location::Relation) }
  def with_attached_photo(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Location::Relation) }
  def select(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Location::Relation) }
  def order(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Location::Relation) }
  def reorder(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Location::Relation) }
  def group(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Location::Relation) }
  def limit(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Location::Relation) }
  def offset(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Location::Relation) }
  def joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Location::Relation) }
  def left_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Location::Relation) }
  def left_outer_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Location::Relation) }
  def where(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Location::Relation) }
  def rewhere(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Location::Relation) }
  def preload(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Location::Relation) }
  def eager_load(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Location::Relation) }
  def includes(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Location::Relation) }
  def from(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Location::Relation) }
  def lock(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Location::Relation) }
  def readonly(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Location::Relation) }
  def extending(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Location::Relation) }
  def or(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Location::Relation) }
  def having(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Location::Relation) }
  def create_with(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Location::Relation) }
  def distinct(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Location::Relation) }
  def references(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Location::Relation) }
  def none(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Location::Relation) }
  def unscope(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Location::Relation) }
  def merge(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Location::Relation) }
  def except(*args, block); end

end

