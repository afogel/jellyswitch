# This is an autogenerated file for dynamic methods in User
# Please rerun rake rails_rbi:models to regenerate.
# typed: ignore

class User::Relation < ActiveRecord::Relation
  include User::NamedScope
  extend T::Generic
  Elem = type_member(fixed: User)
end

class User < ApplicationRecord
  extend T::Sig
  extend T::Generic
  extend User::NamedScope
  Elem = type_template(fixed: User)

  sig { returns(T::Boolean) }
  def admin(); end

  sig { params(value: T::Boolean).void }
  def admin=(value); end

  sig { returns(T::Boolean) }
  def always_allow_building_access(); end

  sig { params(value: T::Boolean).void }
  def always_allow_building_access=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def always_allow_building_access?(*args); end

  sig { returns(T::Boolean) }
  def approved(); end

  sig { params(value: T::Boolean).void }
  def approved=(value); end

  sig { returns(T::Boolean) }
  def bill_to_organization(); end

  sig { params(value: T::Boolean).void }
  def bill_to_organization=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def bill_to_organization?(*args); end

  sig { returns(T.nilable(String)) }
  def bio(); end

  sig { params(value: T.nilable(String)).void }
  def bio=(value); end

  sig { returns(T::Boolean) }
  def card_added(); end

  sig { params(value: T::Boolean).void }
  def card_added=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def card_added?(*args); end

  sig { returns(Checkin::Relation) }
  def checkins(); end

  sig { params(value: T.any(T::Array[Checkin], Checkin::Relation)).void }
  def checkins=(value); end

  sig { returns(DateTime) }
  def created_at(); end

  sig { params(value: DateTime).void }
  def created_at=(value); end

  sig { returns(DayPass::Relation) }
  def day_passes(); end

  sig { params(value: T.any(T::Array[DayPass], DayPass::Relation)).void }
  def day_passes=(value); end

  sig { returns(DoorPunch::Relation) }
  def door_punches(); end

  sig { params(value: T.any(T::Array[DoorPunch], DoorPunch::Relation)).void }
  def door_punches=(value); end

  sig { returns(String) }
  def email(); end

  sig { params(value: String).void }
  def email=(value); end

  sig { returns(FeedItemComment::Relation) }
  def feed_item_comments(); end

  sig { params(value: T.any(T::Array[FeedItemComment], FeedItemComment::Relation)).void }
  def feed_item_comments=(value); end

  sig { returns(FeedItem::Relation) }
  def feed_items(); end

  sig { params(value: T.any(T::Array[FeedItem], FeedItem::Relation)).void }
  def feed_items=(value); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(Invoice::Relation) }
  def invoices(); end

  sig { params(value: T.any(T::Array[Invoice], Invoice::Relation)).void }
  def invoices=(value); end

  sig { returns(T.nilable(String)) }
  def ios_token(); end

  sig { params(value: T.nilable(String)).void }
  def ios_token=(value); end

  sig { returns(T.nilable(String)) }
  def linkedin(); end

  sig { params(value: T.nilable(String)).void }
  def linkedin=(value); end

  sig { returns(MemberFeedback::Relation) }
  def member_feedbacks(); end

  sig { params(value: T.any(T::Array[MemberFeedback], MemberFeedback::Relation)).void }
  def member_feedbacks=(value); end

  sig { returns(T.nilable(String)) }
  def name(); end

  sig { params(value: T.nilable(String)).void }
  def name=(value); end

  sig { returns(Operator) }
  def operator(); end

  sig { params(value: Operator).void }
  def operator=(value); end

  sig { returns(Integer) }
  def operator_id(); end

  sig { params(value: Integer).void }
  def operator_id=(value); end

  sig { returns(OperatorSurvey::Relation) }
  def operator_surveys(); end

  sig { params(value: T.any(T::Array[OperatorSurvey], OperatorSurvey::Relation)).void }
  def operator_surveys=(value); end

  sig { returns(T.nilable(Organization)) }
  def organization(); end

  sig { params(value: T.nilable(Organization)).void }
  def organization=(value); end

  sig { returns(T.nilable(Integer)) }
  def organization_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def organization_id=(value); end

  sig { returns(T::Boolean) }
  def out_of_band(); end

  sig { params(value: T::Boolean).void }
  def out_of_band=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def out_of_band?(*args); end

  sig { returns(T.nilable(String)) }
  def password_digest(); end

  sig { params(value: T.nilable(String)).void }
  def password_digest=(value); end

  sig { returns(T.nilable(ActiveStorage::Attachment)) }
  def profile_photo_attachment(); end

  sig { params(value: T.nilable(ActiveStorage::Attachment)).void }
  def profile_photo_attachment=(value); end

  sig { returns(T.nilable(T.untyped)) }
  def profile_photo_blob(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def profile_photo_blob=(value); end

  sig { returns(Refund::Relation) }
  def refunds(); end

  sig { params(value: T.any(T::Array[Refund], Refund::Relation)).void }
  def refunds=(value); end

  sig { returns(T.nilable(String)) }
  def remember_digest(); end

  sig { params(value: T.nilable(String)).void }
  def remember_digest=(value); end

  sig { returns(Reservation::Relation) }
  def reservations(); end

  sig { params(value: T.any(T::Array[Reservation], Reservation::Relation)).void }
  def reservations=(value); end

  sig { returns(T.nilable(String)) }
  def reset_digest(); end

  sig { params(value: T.nilable(String)).void }
  def reset_digest=(value); end

  sig { returns(T.nilable(DateTime)) }
  def reset_sent_at(); end

  sig { params(value: T.nilable(DateTime)).void }
  def reset_sent_at=(value); end

  sig { returns(T.nilable(String)) }
  def slug(); end

  sig { params(value: T.nilable(String)).void }
  def slug=(value); end

  sig { returns(T.nilable(String)) }
  def stripe_customer_id(); end

  sig { params(value: T.nilable(String)).void }
  def stripe_customer_id=(value); end

  sig { returns(Subscription::Relation) }
  def subscriptions(); end

  sig { params(value: T.any(T::Array[Subscription], Subscription::Relation)).void }
  def subscriptions=(value); end

  sig { returns(T::Boolean) }
  def superadmin(); end

  sig { params(value: T::Boolean).void }
  def superadmin=(value); end

  sig { returns(T.nilable(String)) }
  def twitter(); end

  sig { params(value: T.nilable(String)).void }
  def twitter=(value); end

  sig { returns(DateTime) }
  def updated_at(); end

  sig { params(value: DateTime).void }
  def updated_at=(value); end

  sig { returns(T.nilable(String)) }
  def website(); end

  sig { params(value: T.nilable(String)).void }
  def website=(value); end

end


module User::NamedScope
  extend T::Sig

  sig { returns(User::Relation) }
  def all(); end

  sig { params(args: T.untyped).returns(User::Relation) }
  def admins(*args); end

  sig { params(args: T.untyped).returns(User::Relation) }
  def approved(*args); end

  sig { params(args: T.untyped).returns(User::Relation) }
  def for_space(*args); end

  sig { params(args: T.untyped).returns(User::Relation) }
  def members(*args); end

  sig { params(args: T.untyped).returns(User::Relation) }
  def non_superadmins(*args); end

  sig { params(args: T.untyped).returns(User::Relation) }
  def not_in_organization(*args); end

  sig { params(args: T.untyped).returns(User::Relation) }
  def superadmins(*args); end

  sig { params(args: T.untyped).returns(User::Relation) }
  def unapproved(*args); end

  sig { params(args: T.untyped).returns(User::Relation) }
  def with_attached_profile_photo(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def select(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def order(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def reorder(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def group(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def limit(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def offset(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def left_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def left_outer_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def where(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def rewhere(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def preload(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def eager_load(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def includes(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def from(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def lock(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def readonly(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def extending(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def or(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def having(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def create_with(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def distinct(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def references(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def none(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def unscope(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def merge(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def except(*args, block); end

end

